Tensor Flow 

Everything in tensor flow works on a takes place in graph and running and evaluating uses a session. 

Computation steps in Tensorflow
1) create a tf tensor - > which defines the operation that you want to compute
2) by default the tensor will be added to the default graph 
3) create a session 
4) run the session to compute the operation 

example: 
y = tf.add(675,325)
g = tf.get_default_graph()
[op.name for op in g.get_operations()]
g.get_tensor_by_name('Add'+':0')
sess = tf.Session() 
computed_y = y.eval(session=sess)
computed_y
sess.close()

#create a interactive session # this way we can speeden up the process 
sess = tf.InteractiveSession()
x.eval()   

An image kernel is a small matrix used to apply effects like the ones you might find in Photoshop or Gimp, 
such as blurring, sharpening, outlining or embossing. They're also used in machine learning for 'feature extraction', 
a technique for determining the most important portions of an image. 

How an image kernal works : 

1) nxn block of pixels on an image that slides over the data 
2) It Keeps multiply each pixel in the image with a by the corresponding kernel and then adds it up to one pixel
3) That sum becomes a new pixel in the image on the right

Read : http://setosa.io/ev/image-kernels/

# make a 2D gausian Kernal - this can be done by multiplying the vector by its transpose 

ksize = z.get_shape().as_list()[0]
z_2d = tf.matmul(tf.reshape(z,[ksize,1]),tf.reshape(z,[1,ksize]))

plt.plot(z_2d.eval()) 
plt.imshow(z_2d.eval()) 

hence, this gausian kernal or any other kernal becomes sort of like a lens through which we see our image data.

convolve = tf.nn.conv2d(img_4d,z_4d,strides=[1,1,1,1],padding='SAME')
res = convolve.eval()

Stride - defines/says how a kernal should move across the image 
